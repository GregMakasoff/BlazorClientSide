@page "/speakers"
@inject HttpClient httpClient

<h1 style="margin-bottom: 20px;">Speakers</h1>

@if (students == null) {
<p><em>Loading...</em></p>
} else {
<a  href="add"><button style="margin-bottom: 20px;" class="btn btn-success">Add</button></a>
<table class='table table-hover'>
  <thead>
    <tr>
      <th>ID</th>
      <th>First Name</th>
      <th>Last Name</th>
      <th>Email</th>
      <th>Mobile Number</th>
      <th>Area of Spec.</th>
      <th>City</th>
      <th>Province</th>
      <th>Employer</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var item in students) {
    <tr>
      <td>@item.SpeakerId</td>
      <td>@item.FirstName</td>
      <td>@item.LastName</td>
      <td>@item.Email</td>
      <th>@item.MobileNumber</th>
      <th>@item.AreaOfSpec</th>
      <th>@item.City</th>
      <th>@item.Province</th>
      <th>@item.Employer</th>
      <td><a class="btn btn-success btn-sm" @onclick="@(() => ShowEdit(item.SpeakerId))">edit</a></td>
      <td><a class="btn btn-danger btn-sm" href="/delete/@item.SpeakerId">del</a></td> 
    </tr>
    }
  </tbody>
</table>
}

@if (students != null && mode==MODE.Add) // Insert form 
{
<EditForm Model="@student" OnValidSubmit="@HandleAdd">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
  <br />
  <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
  <br />
  <InputText placeholder="Email" id="email" @bind-Value="@student.Email" />
  <br />
  <InputText placeholder="Mobile Number" id="mobileNum" @bind-Value="@student.MobileNumber" />
  <br />
  <InputText placeholder="Area of Specialization" id="areaOfSpec" @bind-Value="@student.AreaOfSpec" />
  <br />
  <InputText placeholder="City" id="city" @bind-Value="@student.City" />
  <br />
  <InputText placeholder="Province" id="province" @bind-Value="@student.Province" />
  <br />
  <InputText placeholder="Employer" id="employer" @bind-Value="@student.Employer" />
  <button type="submit" value="Delete" class="btn btn-danger">Submit</button>
</EditForm>

@code {
  private Speaker student = new Speaker();

  private async void HandleAdd() {
    string endpoint = $"{baseUrl}api/speaker";

    student.SpeakerId = Guid.NewGuid().ToString();

    await httpClient.SendJsonAsync(HttpMethod.Post, endpoint, student);

    await load();

    mode = MODE.None;
    StateHasChanged(); // causes the page to get automatically refreshed
  }
}
}

@if (students != null && mode == MODE.Edit) // Update
{
  <EditForm Model="@student" OnValidSubmit="@HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />

  <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
  <br />
  <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
  <br />
  <InputText placeholder="Email" id="email" @bind-Value="@student.Email" />
  <br />
  <InputText placeholder="Mobile Number" id="mobileNum" @bind-Value="@student.MobileNumber" />
  <br />
  <InputText placeholder="Area of Specialization" id="areaOfSpec" @bind-Value="@student.AreaOfSpec" />
  <br />
  <InputText placeholder="City" id="city" @bind-Value="@student.City" />
  <br />
  <InputText placeholder="Province" id="province" @bind-Value="@student.Province" />
  <br />
  <InputText placeholder="Employer" id="employer" @bind-Value="@student.Employer" />
  <button type="submit" value="Delete" class="btn btn-danger">Submit</button>

    @code {
      private async void HandleUpdate() {
        string endpoint = $"{baseUrl}api/speaker/{student.SpeakerId}";

        await httpClient.SendJsonAsync(HttpMethod.Put, endpoint, student);

        await load();
        mode = MODE.None;

        StateHasChanged(); // causes the page to get automatically refreshed
      }
    }
  </EditForm>
}

@if (students != null && mode == MODE.Delete) // Delete form
{
<EditForm Model="@student" OnValidSubmit="@HandleDelete">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
  <br />
  <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
  <br />
  <InputText placeholder="Email" id="email" @bind-Value="@student.Email" />
  <br />
  <InputText placeholder="Mobile Number" id="mobileNum" @bind-Value="@student.MobileNumber" />
  <br />
  <InputText placeholder="Area of Specialization" id="areaOfSpec" @bind-Value="@student.AreaOfSpec" />
  <br />
  <InputText placeholder="City" id="city" @bind-Value="@student.City" />
  <br />
  <InputText placeholder="Province" id="province" @bind-Value="@student.Province" />
  <br />
  <InputText placeholder="Employer" id="employer" @bind-Value="@student.Employer" />
  <button type="submit" value="Delete" class="btn btn-danger">Submit</button>

  @code {
    protected async void HandleDelete() {
      string endpoint = $"{baseUrl}api/speaker/{student.SpeakerId}";
      await httpClient.SendJsonAsync(HttpMethod.Delete, endpoint, null);
      await load();
      mode = MODE.None;

      StateHasChanged(); // causes the page to get automatically refreshed
    }
  }
</EditForm>
}


@code { // Main Code
  Speaker[] students;
  string baseUrl = "https://localhost:6001/";

  private enum MODE { None, Add, Edit, Delete };
  MODE mode = MODE.None;
  Speaker s;

  protected override async Task OnInitializedAsync() {
    await load();
  }

  protected async Task load() {
    students = await httpClient.GetJsonAsync<Speaker[]>($"{baseUrl}api/speaker");
  }

  protected void Add() {
    mode = MODE.Add;
  }

  
protected async Task ShowEdit(string id) {
  s = await httpClient.GetJsonAsync<Speaker>($"{baseUrl}api/speaker/{id}");
  student.SpeakerId = s.SpeakerId;
  student.FirstName = s.FirstName;
  student.LastName = s.LastName;
  student.Email = s.Email;
  student.MobileNumber = s.MobileNumber;
  student.AreaOfSpec = s.AreaOfSpec;
  student.City = s.City;
  student.Province = s.Province;
  student.Employer = s.Employer;
  mode = MODE.Edit;
}

protected async Task ShowDelete(string id) {
  s = await httpClient.GetJsonAsync<Speaker>($"{baseUrl}api/speaker/{id}");
  student.SpeakerId = s.SpeakerId;
  student.FirstName = s.FirstName;
  student.LastName = s.LastName;
  student.Email = s.Email;
  student.MobileNumber = s.MobileNumber;
  student.AreaOfSpec = s.AreaOfSpec;
  student.City = s.City;
  student.Province = s.Province;
  student.Employer = s.Employer;
  mode = MODE.Delete;
}


}
